"""Subclass of MainFrame, which is generated by wxFormBuilder."""

import wx
import GUI
import random
import logging
from COMPort import *
from common import *
logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s:%(message)s',
                    datefmt="%H:%M:%S",
                    filename='logger.log',
                    filemode='w')
streamHandler = logging.StreamHandler()
streamHandler.setLevel(logging.DEBUG)
streamHandler.setFormatter(logging.Formatter('%(asctime)s:%(message)s' , "%Y-%m-%d %H:%M:%S"))
logging.getLogger().addHandler(streamHandler)
UpdateCOMPortUsage()
# Implementing MainFrame
class MainFrame( GUI.MainFrame ,ThreadingManagement):
    def __init__( self, parent ):
        GUI.MainFrame.__init__( self, parent )
        ThreadingManagement.__init__(self)
        for port in gCOMUsage.keys():
            if(not gCOMSerial.port and not gCOMUsage[port]):
                self.m_choice_Port1.Append(port)
                self.m_choice_Port1.SetSelection(0)
                gCOMSerial.connect(port)
            elif(not gCOMUsage[port]):
                self.m_choice_Port1.Append(port)
                self.m_choice_Port2.Append(port)
         
    def OnSize( self, event ):
        logging.debug(self.GetSizeTuple())
    def OnChoicePort( self, event ):
        port1 = self.m_choice_Port1.GetStringSelection()
        logging.debug("m_choice_Port1=%s" % port1)
        self.m_choice_Port1.Clear()
        self.m_choice_Port1.Append(port1)
        self.m_choice_Port1.SetSelection(0)
        gCOMSerial.connect(port1)
        for port in gCOMUsage.keys():
            if(port == port1):
                continue
            else:
                self.m_choice_Port1.Append(port)
    def OnBtnClickExe( self, event ):
        if(self.thrd_stop_done):
            for child in self.GetChildren():
                if(not isinstance(child,wx.Button) and not isinstance(child,wx.StaticText)):
                    child.Enable(False)
            self.m_btn_Exe.SetLabel(u"Stop")
            self.ThreadStart(self.ThreadRun)
        else:
            self.ThreadStop()
            self.m_btn_Exe.SetLabel(u"Start")
    def ThreadRun(self):
        gCOMSerial.timeout = self.m_spinCtrlTime.GetValue()/1000.0
        gCOMSerial.timeout = max(1,gCOMSerial.timeout)
        Port1Err  = 0
        Port1Send = 0
        Port1Recv = 0
        xferLen = self.m_spinCtrlLen.GetValue()
        Port1Data = bytearray(xferLen)
        while(not self.thrd_stop):
            gCOMSerial.flush()
            for i in range(xferLen):
                Port1Data[i] = random.randint(0,255)&0xFF            
            nByte = gCOMSerial.write(list(Port1Data))
            logging.debug("[%s] wr %d" % (gCOMSerial.portstr,nByte))
            Port1Send +=1
            if(nByte!=xferLen):
                Port1Err += 1
            nByte = gCOMSerial.read(xferLen)
            logging.debug("[%s] rd %d" % (gCOMSerial.portstr,len(nByte)))
            Port1Recv +=1
            logging.debug(ByteArrayToStr(bytearray(nByte)))
            if(len(nByte)!=xferLen or bytearray(nByte)!=Port1Data):
                Port1Err += 1
            self.m_st_Port1Send.SetLabel("%d" % Port1Send)
            self.m_st_Port1Recv.SetLabel("%d" % Port1Recv)
            self.m_st_Port1Err.SetLabel("%d" % Port1Err)
            time.sleep(self.m_spinCtrlTime.GetValue()/1000.0)
        self.ThreadDone()
if __name__=='__main__':
    app = wx.App()
    my_frame = MainFrame(None)
    my_frame.Show()
    app.MainLoop()